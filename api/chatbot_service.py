from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import os
import json
import requests
from google.cloud import dialogflow
from google.oauth2 import service_account
import uuid
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app)

# Configuration - Load from environment variables
DIALOGFLOW_PROJECT_ID = os.getenv('DIALOGFLOW_PROJECT_ID', 'mineral-droplet-472112-i4')
DIALOGFLOW_SESSION_ID = "default-session"
DIALOGFLOW_LANGUAGE_CODE = "en"  # Default language
GOOGLE_APPLICATION_CREDENTIALS = os.getenv('GOOGLE_APPLICATION_CREDENTIALS', 'credentials/service-account-key.json')

# Initialize Dialogflow client
session_client = None
session_path = None

try:
    if os.path.exists(GOOGLE_APPLICATION_CREDENTIALS):
        # Initialize with service account credentials
        credentials = service_account.Credentials.from_service_account_file(GOOGLE_APPLICATION_CREDENTIALS)
        session_client = dialogflow.SessionsClient(credentials=credentials)
        session_path = session_client.session_path(DIALOGFLOW_PROJECT_ID, DIALOGFLOW_SESSION_ID)
        print("тЬЕ Dialogflow client initialized successfully")
        print(f"ЁЯУЛ Project ID: {DIALOGFLOW_PROJECT_ID}")
    else:
        print("тЪая╕П Dialogflow credentials not found")
        print("ЁЯФД Running in fallback mode - local intent processing only")
        print(f"ЁЯУБ Looking for credentials at: {GOOGLE_APPLICATION_CREDENTIALS}")
except Exception as e:
    print(f"тЭМ Error initializing Dialogflow client: {e}")
    print("ЁЯФД Falling back to local intent processing")
    session_client = None

# Sample tourism data for Jharkhand
JHARKHAND_ATTRACTIONS = {
    'nature': [
        {'name': 'Netarhat', 'description': 'Queen of Chotanagpur, beautiful hill station'},
        {'name': 'Betla National Park', 'description': 'Wildlife sanctuary with tigers and elephants'},
        {'name': 'Hundru Falls', 'description': '98m high waterfall near Ranchi'},
        {'name': 'Dassam Falls', 'description': 'Beautiful waterfall perfect for nature lovers'},
    ],
    'cultural': [
        {'name': 'Jagannath Temple Ranchi', 'description': 'Replica of Puri Jagannath Temple'},
        {'name': 'Rajrappa Temple', 'description': 'Ancient temple dedicated to Goddess Chinnamasta'},
        {'name': 'Tribal Museum Ranchi', 'description': 'Rich tribal heritage and culture'},
        {'name': 'Pahari Mandir', 'description': 'Temple on hilltop with panoramic views'},
    ],
    'adventure': [
        {'name': 'Rock Garden Ranchi', 'description': 'Adventure activities and boating'},
        {'name': 'Tagore Hill', 'description': 'Trekking and scenic views'},
        {'name': 'Kanke Dam', 'description': 'Water sports and picnic spot'},
    ]
}

# Multilingual response templates
RESPONSES = {
    'en': {
        'greeting': 'Hello! Welcome to Jharkhand Tourism Assistant. How can I help you explore the beautiful state of Jharkhand? ЁЯМ┐',
        'help': 'I can help you with:\nтАв Tourist places and attractions\nтАв Plan customized itineraries\nтАв Cultural and heritage sites\nтАв Eco-tourism and wildlife\nтАв Local information and tips\n\nJust ask me anything about Jharkhand!',
        'default': "I'm here to help you explore Jharkhand! Ask me about tourist places, plan itineraries, or get local information.",
        'cultural': 'Jharkhand is rich in tribal culture and heritage:\n\nЁЯПЫя╕П Cultural Attractions:\nтАв Jagannath Temple Ranchi - Replica of Puri temple\nтАв Rajrappa Temple - Ancient Chinnamasta temple\nтАв Tribal Museum Ranchi - Showcases tribal heritage\nтАв Pahari Mandir - Hilltop temple with panoramic views\nтАв Sun Temple Bundu - Ancient sun worship site\n\nЁЯОн Cultural Experiences:\nтАв Tribal dance performances\nтАв Traditional handicraft workshops\nтАв Local festivals and fairs\nтАв Authentic tribal cuisine\n\nWould you like to plan a cultural heritage tour?',
        'eco_tourism': 'Jharkhand offers amazing eco-tourism experiences:\n\nЁЯМ┐ Eco-Tourism Destinations:\nтАв Betla National Park - Tigers, elephants, wildlife safari\nтАв Palamau Tiger Reserve - Rich biodiversity\nтАв Hazaribagh Wildlife Sanctuary - Bird watching paradise\nтАв Dalma Wildlife Sanctuary - Elephant reserve\nтАв Koderma Wildlife Sanctuary - Rock formations\n\nЁЯПЮя╕П Natural Attractions:\nтАв Hundru Falls - 98m spectacular waterfall\nтАв Dassam Falls - Beautiful cascade\nтАв Hirni Falls - Hidden gem for nature lovers\nтАв Netarhat - Queen of Chotanagpur plateau\n\nPerfect for nature photography and wildlife enthusiasts!'
    },
    'hi': {
        'greeting': 'рдирдорд╕реНрддреЗ! рдЭрд╛рд░рдЦрдВрдб рдкрд░реНрдпрдЯрди рд╕рд╣рд╛рдпрдХ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдореИрдВ рдЭрд╛рд░рдЦрдВрдб рд░рд╛рдЬреНрдп рдХреА рдЦреЛрдЬ рдореЗрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? ЁЯМ┐',
        'help': 'рдореИрдВ рдЖрдкрдХреА рдЗрди рдЪреАрдЬреЛрдВ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ:\nтАв рдкрд░реНрдпрдЯрди рд╕реНрдерд▓ рдФрд░ рдЖрдХрд░реНрд╖рдг\nтАв рд╡реНрдпрдХреНрддрд┐рдЧрдд рдпрд╛рддреНрд░рд╛ рдпреЛрдЬрдирд╛\nтАв рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдФрд░ рд╡рд┐рд░рд╛рд╕рдд рд╕реНрдерд▓\nтАв рдкрд╛рд░рд┐рд╕реНрдерд┐рддрд┐рдХреА рдкрд░реНрдпрдЯрди рдФрд░ рд╡рдиреНрдпрдЬреАрд╡\nтАв рд╕реНрдерд╛рдиреАрдп рдЬрд╛рдирдХрд╛рд░реА рдФрд░ рд╕реБрдЭрд╛рд╡\n\nрдЭрд╛рд░рдЦрдВрдб рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ!',
        'default': 'рдореИрдВ рдЭрд╛рд░рдЦрдВрдб рдХреА рдЦреЛрдЬ рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБ! рдкрд░реНрдпрдЯрди рд╕реНрдерд▓реЛрдВ, рдпрд╛рддреНрд░рд╛ рдпреЛрдЬрдирд╛ рдпрд╛ рд╕реНрдерд╛рдиреАрдп рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред',
        'cultural': 'рдЭрд╛рд░рдЦрдВрдб рдЖрджрд┐рд╡рд╛рд╕реА рд╕рдВрд╕реНрдХреГрддрд┐ рдФрд░ рд╡рд┐рд░рд╛рд╕рдд рд╕реЗ рднрд░рдкреВрд░ рд╣реИ:\n\nЁЯПЫя╕П рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдЖрдХрд░реНрд╖рдг:\nтАв рдЬрдЧрдиреНрдирд╛рде рдордВрджрд┐рд░ рд░рд╛рдВрдЪреА - рдкреБрд░реА рдордВрджрд┐рд░ рдХреА рдкреНрд░рддрд┐рдХреГрддрд┐\nтАв рд░рд╛рдЬрд░рдкреНрдкрд╛ рдордВрджрд┐рд░ - рдкреНрд░рд╛рдЪреАрди рдЫрд┐рдиреНрдирдорд╕реНрддрд╛ рдордВрджрд┐рд░\nтАв рдЖрджрд┐рд╡рд╛рд╕реА рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп рд░рд╛рдВрдЪреА - рдЖрджрд┐рд╡рд╛рд╕реА рд╡рд┐рд░рд╛рд╕рдд\nтАв рдкрд╣рд╛рдбрд╝реА рдордВрджрд┐рд░ - рдкрд╣рд╛рдбрд╝реА рдкрд░ рд╕реНрдерд┐рдд рдордВрджрд┐рд░\n\nЁЯОн рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдЕрдиреБрднрд╡:\nтАв рдЖрджрд┐рд╡рд╛рд╕реА рдиреГрддреНрдп рдкреНрд░рджрд░реНрд╢рди\nтАв рдкрд╛рд░рдВрдкрд░рд┐рдХ рд╣рд╕реНрддрд╢рд┐рд▓реНрдк рдХрд╛рд░реНрдпрд╢рд╛рд▓рд╛\nтАв рд╕реНрдерд╛рдиреАрдп рддреНрдпреЛрд╣рд╛рд░ рдФрд░ рдореЗрд▓реЗ\n\nрдХреНрдпрд╛ рдЖрдк рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдпрд╛рддреНрд░рд╛ рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?',
        'eco_tourism': 'рдЭрд╛рд░рдЦрдВрдб рдореЗрдВ рдЕрджреНрднреБрдд рдкрд╛рд░рд┐рд╕реНрдерд┐рддрд┐рдХреА рдкрд░реНрдпрдЯрди:\n\nЁЯМ┐ рдкрд╛рд░рд┐рд╕реНрдерд┐рддрд┐рдХреА рд╕реНрдерд▓:\nтАв рдмреЗрддрд▓рд╛ рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЙрджреНрдпрд╛рди - рдмрд╛рдШ, рд╣рд╛рдереА, рд╡рдиреНрдпрдЬреАрд╡ рд╕рдлрд╛рд░реА\nтАв рдкрд▓рд╛рдореВ рдЯрд╛рдЗрдЧрд░ рд░рд┐рдЬрд░реНрд╡ - рд╕рдореГрджреНрдз рдЬреИрд╡ рд╡рд┐рд╡рд┐рдзрддрд╛\nтАв рд╣рдЬрд╛рд░реАрдмрд╛рдЧ рд╡рдиреНрдпрдЬреАрд╡ рдЕрднрдпрд╛рд░рдгреНрдп - рдкрдХреНрд╖реА рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП\n\nЁЯПЮя╕П рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЖрдХрд░реНрд╖рдг:\nтАв рд╣реБрдВрдбрд░реВ рдлреЙрд▓реНрд╕ - 98 рдореАрдЯрд░ рдХрд╛ рд╢рд╛рдирджрд╛рд░ рдЭрд░рдирд╛\nтАв рджрд╢рдо рдлреЙрд▓реНрд╕ - рд╕реБрдВрджрд░ рдЭрд░рдирд╛\nтАв рдиреЗрддрд░рд╣рд╛рдЯ - рдЫреЛрдЯрд╛рдирд╛рдЧрдкреБрд░ рдХреА рд░рд╛рдиреА'
    },
    'bn': {
        'greeting': 'ржиржорж╕рзНржХрж╛рж░! ржЭрж╛ржбрж╝ржЦржгрзНржб ржкрж░рзНржпржЯржи рж╕рж╣рж╛ржпрж╝ржХрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржоред ржЭрж╛ржбрж╝ржЦржгрзНржб рж░рж╛ржЬрзНржпрзЗрж░ ржЕржирзНржмрзЗрж╖ржгрзЗ ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐? ЁЯМ┐',
        'help': 'ржЖржорж┐ ржПржЗ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:\nтАв ржкрж░рзНржпржЯржи рж╕рзНржерж╛ржи ржУ ржЖржХрж░рзНрж╖ржг\nтАв ржмрзНржпржХрзНрждрж┐ржЧржд ржнрзНрж░ржоржг ржкрж░рж┐ржХрж▓рзНржкржирж╛\nтАв рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржУ ржРрждрж┐рж╣рзНржп рж╕рзНржерж╛ржи\nтАв ржкрж░рж┐ржмрзЗрж╢ ржкрж░рзНржпржЯржи ржУ ржмржирзНржпржкрзНрж░рж╛ржгрзА\nтАв рж╕рзНржерж╛ржирзАржпрж╝ рждржерзНржп ржУ ржкрж░рж╛ржорж░рзНрж╢\n\nржЭрж╛ржбрж╝ржЦржгрзНржб рж╕ржорзНржкрж░рзНржХрзЗ ржпрзЗржХрзЛржирзЛ ржХрж┐ржЫрзБ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи!',
        'default': 'ржЖржорж┐ ржЭрж╛ржбрж╝ржЦржгрзНржб ржЕржирзНржмрзЗрж╖ржгрзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж╛рж░ ржЬржирзНржп ржПржЦрж╛ржирзЗ ржЖржЫрж┐! ржкрж░рзНржпржЯржи рж╕рзНржерж╛ржи, ржнрзНрж░ржоржг ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржмрж╛ рж╕рзНржерж╛ржирзАржпрж╝ рждржерзНржп рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржиред',
        'cultural': 'ржЭрж╛ржбрж╝ржЦржгрзНржб ржЙржкржЬрж╛рждрзАржпрж╝ рж╕ржВрж╕рзНржХрзГрждрж┐ ржУ ржРрждрж┐рж╣рзНржпрзЗ рж╕ржорзГржжрзНржз:\n\nЁЯПЫя╕П рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржЖржХрж░рзНрж╖ржг:\nтАв ржЬржЧржирзНржирж╛рже ржоржирзНржжрж┐рж░ рж░рж╛ржБржЪрж┐ - ржкрзБрж░рзА ржоржирзНржжрж┐рж░рзЗрж░ ржкрзНрж░рждрж┐рж░рзВржк\nтАв рж░рж╛ржЬрж░рж╛ржкрзНржкрж╛ ржоржирзНржжрж┐рж░ - ржкрзНрж░рж╛ржЪрзАржи ржЫрж┐ржирзНржиржорж╕рзНрждрж╛ ржоржирзНржжрж┐рж░\nтАв ржЙржкржЬрж╛рждрзАржпрж╝ ржЬрж╛ржжрзБржШрж░ рж░рж╛ржБржЪрж┐ - ржЙржкржЬрж╛рждрзАржпрж╝ ржРрждрж┐рж╣рзНржп\n\nЁЯОн рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржЕржнрж┐ржЬрзНржЮрждрж╛:\nтАв ржЙржкржЬрж╛рждрзАржпрж╝ ржирзГрждрзНржп ржкрж░рж┐ржмрзЗрж╢ржирж╛\nтАв ржРрждрж┐рж╣рзНржпржмрж╛рж╣рзА рж╣рж╕рзНрждрж╢рж┐рж▓рзНржк ржХрж░рзНржорж╢рж╛рж▓рж╛\nтАв рж╕рзНржерж╛ржирзАржпрж╝ ржЙрзОрж╕ржм ржУ ржорзЗрж▓рж╛',
        'eco_tourism': 'ржЭрж╛ржбрж╝ржЦржгрзНржбрзЗ ржЕрж╕рж╛ржзрж╛рж░ржг ржкрж░рж┐ржмрзЗрж╢ ржкрж░рзНржпржЯржи:\n\nЁЯМ┐ ржкрж░рж┐ржмрзЗрж╢ ржкрж░рзНржпржЯржи ржЧржирзНрждржмрзНржп:\nтАв ржмрзЗрждрж▓рж╛ ржЬрж╛рждрзАржпрж╝ ржЙржжрзНржпрж╛ржи - ржмрж╛рдШ, рж╣рж╛рждрж┐, ржмржирзНржпржкрзНрж░рж╛ржгрзА рж╕рж╛ржлрж╛рж░рж┐\nтАв ржкрж╛рж▓рж╛ржорзМ ржЯрж╛ржЗржЧрж╛рж░ рж░рж┐ржЬрж╛рж░рзНржн - рж╕ржорзГржжрзНржз ржЬрзАржмржмрзИржЪрж┐рждрзНрж░рзНржп\nтАв рж╣рж╛ржЬрж╛рж░рж┐ржмрж╛ржЧ ржмржирзНржпржкрзНрж░рж╛ржгрзА ржЕржнржпрж╝рж╛рж░ржгрзНржп - ржкрж╛ржЦрж┐ ржжрзЗржЦрж╛рж░ рж╕рзНржмрж░рзНржЧ\n\nЁЯПЮя╕П ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржЖржХрж░рзНрж╖ржг:\nтАв рж╣рзБржирзНржжрзНрж░рзБ ржЬрж▓ржкрзНрж░ржкрж╛ржд - рзпрзо ржорж┐ржЯрж╛рж░ ржжрж░рзНрж╢ржирзАржпрж╝ ржЬрж▓ржкрзНрж░ржкрж╛ржд\nтАв ржжрж╢ржо ржЬрж▓ржкрзНрж░ржкрж╛ржд - рж╕рзБржирзНржжрж░ ржЬрж▓ржкрзНрж░ржкрж╛ржд'
    }
}

# Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    """Handle text-based chat messages via Dialogflow"""
    try:
        data = request.json
        user_message = data.get('message', '')
        language = data.get('language', 'en')
        
        # Map language codes for Dialogflow
        language_map = {
            'en': 'en-US',
            'hi': 'hi',
            'bn': 'bn',
            'or': 'or',
            'ur': 'ur'
        }
        
        dialogflow_language = language_map.get(language, 'en-US')
        
        # Use Dialogflow if available, otherwise use fallback
        if session_client is not None:
            print(f"ЁЯдЦ Processing with Dialogflow: '{user_message}' (Language: {dialogflow_language})")
            response_text = query_dialogflow(user_message, dialogflow_language)
        else:
            print(f"ЁЯФД Processing with fallback: '{user_message}' (Language: {language})")
            response_text = process_intent_fallback(user_message, language)
        
        return jsonify({
            'success': True,
            'response': response_text,
            'language': language,
            'processing_mode': 'dialogflow' if session_client else 'fallback'
        })
    except Exception as e:
        print(f"тЭМ Chat error: {e}")
        return jsonify({'success': False, 'error': str(e)})

def query_dialogflow(message, language_code):
    """Query Dialogflow for intent recognition and response"""
    try:
        # Create session path with unique session ID for each query
        session_id = str(uuid.uuid4())
        current_session_path = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id)
        
        # Create text input
        text_input = dialogflow.TextInput(text=message, language_code=language_code)
        query_input = dialogflow.QueryInput(text=text_input)
        
        # Send request to Dialogflow
        response = session_client.detect_intent(
            request={"session": current_session_path, "query_input": query_input}
        )
        
        # Log the response for debugging
        print(f"ЁЯОп Dialogflow Intent: {response.query_result.intent.display_name}")
        print(f"ЁЯУЭ Dialogflow Response: {response.query_result.fulfillment_text[:100]}...")
        
        # Check if we got a response from Dialogflow
        if response.query_result.fulfillment_text:
            return response.query_result.fulfillment_text
        else:
            # If no response from Dialogflow, use fallback
            print("тЪая╕П No response from Dialogflow, using fallback")
            return process_intent_fallback(message, language_code[:2])
        
    except Exception as e:
        print(f"тЭМ Dialogflow error: {e}")
        # Fallback to local processing
        return process_intent_fallback(message, language_code[:2] if '-' in language_code else language_code)

def process_intent_fallback(user_message, language='en'):
    """Fallback intent processing when Dialogflow is not available"""
    user_message_lower = user_message.lower()
    
    # Greeting intent
    if any(word in user_message_lower for word in ['hello', 'hi', 'hey', 'namaste', 'namaskar', 'ржиржорж╕рзНржХрж╛рж░', 'рмирморм╕рнНрмХрм╛рм░', '╪з┘Д╪│┘Д╪з┘Е']):
        return get_greeting_response(language)
    
    # Tourist places intent
    elif any(word in user_message_lower for word in ['places', 'tourist', 'visit', 'attraction', 'spots', 'рдкрд░реНрдпрдЯрди', 'рж╕рзНржерж╛ржи', 'рмкрм░рнНрмпрнНрнЯрмЯрми', '┘Е┘В╪з┘Е╪з╪к']):
        return get_tourist_places_response(language)
    
    # Itinerary planning intent
    elif any(word in user_message_lower for word in ['plan', 'itinerary', 'trip', 'tour', 'day', 'рдпреЛрдЬрдирд╛', 'ржкрж░рж┐ржХрж▓рзНржкржирж╛', 'рмпрнЛрмЬрмирм╛', '┘Е┘Ж╪╡┘И╪и█Б']):
        return plan_itinerary(user_message, language)
    
    # Cultural information intent
    elif any(word in user_message_lower for word in ['cultural', 'culture', 'heritage', 'tribal', 'temple', 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ', 'рж╕ржВрж╕рзНржХрзГрждрж┐', 'рм╕рмВрм╕рнНрмХрнГрмдрм┐', '╪л┘В╪з┘Б╪к']):
        return get_cultural_info(language)
    
    # Eco tourism intent
    elif any(word in user_message_lower for word in ['eco', 'nature', 'wildlife', 'forest', 'falls', 'рдкреНрд░рд╛рдХреГрддрд┐рдХ', 'ржкрзНрж░ржХрзГрждрж┐', 'рмкрнНрм░рмХрнГрмдрж┐', '┘В╪п╪▒╪к█М']):
        return get_eco_tourism_info(language)
    
    # Help intent
    elif any(word in user_message_lower for word in ['help', 'assist', 'support', 'рдорджрдж', 'рж╕рж╛рж╣рж╛ржпрзНржп', 'рм╕рм╛рм╣рм╛рмпрнНрнЯ', '┘Е╪п╪п']):
        return get_help_response(language)
    
    # Default response
    else:
        return get_default_response(language)

def get_greeting_response(language):
    return RESPONSES.get(language, RESPONSES['en'])['greeting']

def get_help_response(language):
    return RESPONSES.get(language, RESPONSES['en'])['help']

def get_default_response(language):
    return RESPONSES.get(language, RESPONSES['en'])['default']

def get_cultural_info(language):
    return RESPONSES.get(language, RESPONSES['en'])['cultural']

def get_eco_tourism_info(language):
    return RESPONSES.get(language, RESPONSES['en'])['eco_tourism']

def get_tourist_places_response(language='en'):
    """Generate response about tourist places based on language"""
    if language == 'hi':
        return """ЁЯМ┐ рдЭрд╛рд░рдЦрдВрдб рдХреЗ рдкреНрд░рдореБрдЦ рдкрд░реНрдпрдЯрди рд╕реНрдерд▓:

рдкреНрд░рд╛рдХреГрддрд┐рдХ рд╕реБрдВрджрд░рддрд╛:
тАв рдиреЗрддрд░рд╣рд╛рдЯ - рдЫреЛрдЯрд╛рдирд╛рдЧрдкреБрд░ рдХреА рд░рд╛рдиреА
тАв рд╣реБрдВрдбрд░реВ рдлреЙрд▓реНрд╕ - 98 рдореАрдЯрд░ рдКрдВрдЪрд╛ рдЭрд░рдирд╛
тАв рджрд╢рдо рдлреЙрд▓реНрд╕ - рдкреНрд░рд╛рдХреГрддрд┐рдХ рд╕реБрдВрджрд░рддрд╛
тАв рдмреЗрддрд▓рд╛ рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЙрджреНрдпрд╛рди - рд╡рдиреНрдпрдЬреАрд╡ рд╕рдлрд╛рд░реА

ЁЯПЫя╕П рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╕реНрдерд▓:
тАв рдЬрдЧрдиреНрдирд╛рде рдордВрджрд┐рд░ рд░рд╛рдВрдЪреА
тАв рд░рд╛рдЬрд░рдкреНрдкрд╛ рдордВрджрд┐рд░
тАв рдЖрджрд┐рд╡рд╛рд╕реА рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп
тАв рдкрд╣рд╛рдбрд╝реА рдордВрджрд┐рд░

ЁЯПФя╕П рд░реЛрдорд╛рдВрдЪ:
тАв рд░реЙрдХ рдЧрд╛рд░реНрдбрди рд░рд╛рдВрдЪреА
тАв рдЯреИрдЧреЛрд░ рд╣рд┐рд▓ - рдЯреНрд░реЗрдХрд┐рдВрдЧ
тАв рдХрд╛рдВрдХреЗ рдбреИрдо - рдЬрд▓ рдХреНрд░реАрдбрд╝рд╛

рдХрд┐рд╕реА рд╡рд┐рд╢реЗрд╖ рд╕реНрдерд╛рди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?"""

    elif language == 'bn':
        return """ЁЯМ┐ ржЭрж╛ржбрж╝ржЦржгрзНржбрзЗрж░ ржкрзНрж░ржзрж╛ржи ржкрж░рзНржпржЯржи рж╕рзНржерж╛ржи:

ржкрзНрж░рж╛ржХрзГрждрж┐ржХ рж╕рзМржирзНржжрж░рзНржп:
тАв ржирзЗрждрж░рж╣рж╛ржЯ - ржЫрзЛржЯржирж╛ржЧржкрзБрж░рзЗрж░ рж░рж╛ржирзА
тАв рж╣рзБржирзНржжрзНрж░рзБ ржЬрж▓ржкрзНрж░ржкрж╛ржд - рзпрзо ржорж┐ржЯрж╛рж░ ржЙржБржЪрзБ
тАв ржжрж╢ржо ржЬрж▓ржкрзНрж░ржкрж╛ржд - ржкрзНрж░рж╛ржХрзГрждрж┐ржХ рж╕рзМржирзНржжрж░рзНржп
тАв ржмрзЗрждрж▓рж╛ ржЬрж╛рждрзАржпрж╝ ржЙржжрзНржпрж╛ржи - ржмржирзНржпржкрзНрж░рж╛ржгрзА рж╕рж╛ржлрж╛рж░рж┐

ЁЯПЫя╕П рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ рж╕рзНржерж╛ржи:
тАв ржЬржЧржирзНржирж╛рже ржоржирзНржжрж┐рж░ рж░рж╛ржБржЪрж┐
тАв рж░рж╛ржЬрж░рж╛ржкрзНржкрж╛ ржоржирзНржжрж┐рж░
тАв ржЙржкржЬрж╛рждрзАржпрж╝ ржЬрж╛ржжрзБржШрж░
тАв ржкрж╛рж╣рж╛ржбрж╝рзА ржоржирзНржжрж┐рж░

ЁЯПФя╕П ржЕрзНржпрж╛ржбржнрзЗржЮрзНржЪрж╛рж░:
тАв рж░ржХ ржЧрж╛рж░рзНржбрзЗржи рж░рж╛ржБржЪрж┐
тАв ржЯрзНржпрж╛ржЧрзЛрж░ рж╣рж┐рж▓ - ржЯрзНрж░рзЗржХрж┐ржВ
тАв ржХрж╛ржБржХрзЗ ржмрж╛ржБржз - ржЬрж▓ ржХрзНрж░рзАржбрж╝рж╛

ржХрзЛржи ржмрж┐рж╢рзЗрж╖ рж╕рзНржерж╛ржи рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирждрзЗ ржЪрж╛ржи?"""

    else:  # Default English
        return """ЁЯМ┐ Popular Tourist Attractions in Jharkhand:

ЁЯМ▓ Nature & Eco-Tourism:
тАв Netarhat - Queen of Chotanagpur, beautiful hill station
тАв Betla National Park - Wildlife sanctuary with tigers and elephants
тАв Hundru Falls - 98m high spectacular waterfall near Ranchi
тАв Dassam Falls - Beautiful cascade perfect for nature lovers
тАв Hirni Falls - Hidden gem in serene surroundings

ЁЯПЫя╕П Cultural Heritage Sites:
тАв Jagannath Temple Ranchi - Replica of famous Puri Jagannath Temple
тАв Rajrappa Temple - Ancient temple dedicated to Goddess Chinnamasta
тАв Tribal Museum Ranchi - Showcases rich tribal heritage and culture
тАв Pahari Mandir - Temple on hilltop with panoramic city views
тАв Sun Temple Bundu - Ancient architectural marvel

ЁЯПФя╕П Adventure & Activities:
тАв Rock Garden Ranchi - Adventure activities and boating
тАв Tagore Hill - Perfect for trekking and scenic photography
тАв Kanke Dam - Water sports and family picnic spot
тАв Jonha Falls - Rock climbing and nature walks

Would you like detailed information about any specific attraction or plan a customized itinerary?"""

def plan_itinerary(user_message, language='en'):
    """Generate itinerary based on user input and language"""
    
    # Extract information from user message
    days = extract_days(user_message)
    interests = extract_interests(user_message)
    
    if not days:
        if language == 'hi':
            return "рдпрд╛рддреНрд░рд╛ рдпреЛрдЬрдирд╛ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ:\nтАв рдХрд┐рддрдиреЗ рджрд┐рди рдХреА рдпрд╛рддреНрд░рд╛?\nтАв рдЖрдкрдХреА рд░реБрдЪрд┐ (рдкреНрд░рдХреГрддрд┐/рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ/рд╕рд╛рд╣рд╕рд┐рдХ)?\nтАв рдмрдЬрдЯ рд░реЗрдВрдЬ?\n\nрдЙрджрд╛рд╣рд░рдг: '3 рджрд┐рди рдХреА рдкреНрд░рд╛рдХреГрддрд┐рдХ рдпрд╛рддреНрд░рд╛ рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВ'"
        elif language == 'bn':
            return "ржнрзНрж░ржоржг ржкрж░рж┐ржХрж▓рзНржкржирж╛ рждрзИрж░рж┐ ржХрж░рждрзЗ ржжржпрж╝рж╛ ржХрж░рзЗ ржмрж▓рзБржи:\nтАв ржХрждржжрж┐ржирзЗрж░ ржнрзНрж░ржоржг?\nтАв ржЖржкржирж╛рж░ ржЖржЧрзНрж░рж╣ (ржкрзНрж░ржХрзГрждрж┐/рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ/ржжрзБржГрж╕рж╛рж╣рж╕рж┐ржХ)?\nтАв ржмрж╛ржЬрзЗржЯ рж╕рзАржорж╛?\n\nржЙржжрж╛рж╣рж░ржг: 'рзй ржжрж┐ржирзЗрж░ ржкрзНрж░ржХрзГрждрж┐ ржнрзНрж░ржоржг ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржХрж░рзБржи'"
        else:
            return "To plan your perfect Jharkhand itinerary, please tell me:\nтАв Number of days?\nтАв Your interests (nature/cultural/adventure)?\nтАв Budget range?\n\nExample: 'Plan a 3 day nature trip'"
    
    # Generate itinerary based on language
    if language == 'hi':
        return generate_hindi_itinerary(days, interests)
    elif language == 'bn':
        return generate_bengali_itinerary(days, interests)
    else:
        return generate_english_itinerary(days, interests)

def generate_english_itinerary(days, interests):
    """Generate English itinerary"""
    itinerary = f"ЁЯЧУя╕П {days}-Day Jharkhand Itinerary:\n\n"
    
    if days >= 1:
        itinerary += "ЁЯУЕ Day 1: Ranchi Exploration\n"
        itinerary += "тАв Morning: Visit Hundru Falls (98m waterfall)\n"
        itinerary += "тАв Afternoon: Rock Garden - boating and adventure activities\n"
        itinerary += "тАв Evening: Pahari Mandir for panoramic sunset views\n"
        itinerary += "тАв Night: Stay in Ranchi city\n\n"
    
    if days >= 2:
        itinerary += "ЁЯУЕ Day 2: Cultural Heritage Tour\n"
        itinerary += "тАв Morning: Jagannath Temple - architectural marvel\n"
        itinerary += "тАв Afternoon: Tribal Museum - rich cultural heritage\n"
        itinerary += "тАв Evening: Local market shopping for tribal handicrafts\n"
        itinerary += "тАв Night: Cultural folk dance performance\n\n"
    
    if days >= 3:
        itinerary += "ЁЯУЕ Day 3: Netarhat Hill Station\n"
        itinerary += "тАв Early morning: Drive to Netarhat (Queen of Chotanagpur)\n"
        itinerary += "тАв Morning: Sunrise point experience\n"
        itinerary += "тАв Afternoon: Nature walks and local tribal village visit\n"
        itinerary += "тАв Evening: Sunset point with panoramic valley views\n\n"
    
    if days >= 4:
        itinerary += "ЁЯУЕ Day 4: Wildlife Safari\n"
        itinerary += "тАв Morning: Betla National Park safari\n"
        itinerary += "тАв Afternoon: Wildlife photography and nature walks\n"
        itinerary += "тАв Evening: Campfire and traditional dinner\n\n"
    
    if days >= 5:
        itinerary += "ЁЯУЕ Day 5: Adventure & Departure\n"
        itinerary += "тАв Morning: Dassam Falls - nature photography\n"
        itinerary += "тАв Afternoon: Tagore Hill trekking\n"
        itinerary += "тАв Evening: Return journey with memories\n\n"
    
    # Add travel tips
    itinerary += "ЁЯТб Travel Tips:\n"
    itinerary += "тАв Best time: October to March (pleasant weather)\n"
    itinerary += "тАв Carry comfortable trekking shoes\n"
    itinerary += "тАв Try local tribal cuisine (Handia, Thekua)\n"
    itinerary += "тАв Book forest accommodations in advance\n"
    itinerary += "тАв Respect tribal customs and traditions\n\n"
    
    itinerary += "ЁЯОп Estimated Budget: тВ╣8,000-15,000 per person\n"
    itinerary += "ЁЯУЮ Need help with bookings or more details? Just ask!"
    
    return itinerary

def generate_hindi_itinerary(days, interests):
    """Generate Hindi itinerary"""
    itinerary = f"ЁЯЧУя╕П {days}-рджрд┐рди рдЭрд╛рд░рдЦрдВрдб рдпрд╛рддреНрд░рд╛ рдпреЛрдЬрдирд╛:\n\n"
    
    if days >= 1:
        itinerary += "ЁЯУЕ рджрд┐рди 1: рд░рд╛рдВрдЪреА рдЕрдиреНрд╡реЗрд╖рдг\n"
        itinerary += "тАв рд╕реБрдмрд╣: рд╣реБрдВрдбрд░реВ рдлреЙрд▓реНрд╕ (98 рдореАрдЯрд░ рдЭрд░рдирд╛) рджреЗрдЦреЗрдВ\n"
        itinerary += "тАв рджреЛрдкрд╣рд░: рд░реЙрдХ рдЧрд╛рд░реНрдбрди - рдиреМрдХрд╛ рд╡рд┐рд╣рд╛рд░ рдФрд░ рд░реЛрдорд╛рдВрдЪрдХ рдЧрддрд┐рд╡рд┐рдзрд┐рдпрд╛рдВ\n"
        itinerary += "тАв рд╢рд╛рдо: рдкрд╣рд╛рдбрд╝реА рдордВрджрд┐рд░ рд╕реЗ рд╕реВрд░реНрдпрд╛рд╕реНрдд рдХрд╛ рдирдЬрд╛рд░рд╛\n"
        itinerary += "тАв рд░рд╛рдд: рд░рд╛рдВрдЪреА рд╢рд╣рд░ рдореЗрдВ рдард╣рд░реЗрдВ\n\n"
    
    if days >= 2:
        itinerary += "ЁЯУЕ рджрд┐рди 2: рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╡рд┐рд░рд╛рд╕рдд рдпрд╛рддреНрд░рд╛\n"
        itinerary += "тАв рд╕реБрдмрд╣: рдЬрдЧрдиреНрдирд╛рде рдордВрджрд┐рд░ - рд╡рд╛рд╕реНрддреБрдХрд▓рд╛ рдХрд╛ рдирдореВрдирд╛\n"
        itinerary += "тАв рджреЛрдкрд╣рд░: рдЖрджрд┐рд╡рд╛рд╕реА рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп - рд╕рдореГрджреНрдз рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╡рд┐рд░рд╛рд╕рдд\n"
        itinerary += "тАв рд╢рд╛рдо: рд╕реНрдерд╛рдиреАрдп рдмрд╛рдЬрд╛рд░ рдореЗрдВ рдЖрджрд┐рд╡рд╛рд╕реА рд╣рд╕реНрддрд╢рд┐рд▓реНрдк рдЦрд░реАрджрд╛рд░реА\n"
        itinerary += "тАв рд░рд╛рдд: рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд▓реЛрдХ рдиреГрддреНрдп рдкреНрд░рджрд░реНрд╢рди\n\n"
    
    if days >= 3:
        itinerary += "ЁЯУЕ рджрд┐рди 3: рдиреЗрддрд░рд╣рд╛рдЯ рд╣рд┐рд▓ рд╕реНрдЯреЗрд╢рди\n"
        itinerary += "тАв рд╕реБрдмрд╣ рдЬрд▓реНрджреА: рдиреЗрддрд░рд╣рд╛рдЯ рдХреА рдпрд╛рддреНрд░рд╛ (рдЫреЛрдЯрд╛рдирд╛рдЧрдкреБрд░ рдХреА рд░рд╛рдиреА)\n"
        itinerary += "тАв рд╕реБрдмрд╣: рд╕реВрд░реНрдпреЛрджрдп рдмрд┐рдВрджреБ рдХрд╛ рдЕрдиреБрднрд╡\n"
        itinerary += "тАв рджреЛрдкрд╣рд░: рдкреНрд░рдХреГрддрд┐ рд╕реИрд░ рдФрд░ рд╕реНрдерд╛рдиреАрдп рдЖрджрд┐рд╡рд╛рд╕реА рдЧрд╛рдВрд╡ рднреНрд░рдордг\n"
        itinerary += "тАв рд╢рд╛рдо: рд╕реВрд░реНрдпрд╛рд╕реНрдд рдмрд┐рдВрджреБ рд╕реЗ рдШрд╛рдЯреА рдХрд╛ рдирдЬрд╛рд░рд╛\n\n"
    
    # Add travel tips in Hindi
    itinerary += "ЁЯТб рдпрд╛рддреНрд░рд╛ рд╕реБрдЭрд╛рд╡:\n"
    itinerary += "тАв рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд╕рдордп: рдЕрдХреНрдЯреВрдмрд░ рд╕реЗ рдорд╛рд░реНрдЪ (рд╕реБрд╣рд╛рд╡рдирд╛ рдореМрд╕рдо)\n"
    itinerary += "тАв рдЖрд░рд╛рдорджрд╛рдпрдХ рдЯреНрд░реЗрдХрд┐рдВрдЧ рдЬреВрддреЗ рд▓реЗ рдЬрд╛рдПрдВ\n"
    itinerary += "тАв рд╕реНрдерд╛рдиреАрдп рдЖрджрд┐рд╡рд╛рд╕реА рднреЛрдЬрди рдХрд╛ рд╕реНрд╡рд╛рдж рд▓реЗрдВ\n"
    itinerary += "тАв рд╡рди рд╡рд┐рд╢реНрд░рд╛рдо рдЧреГрд╣ рдкрд╣рд▓реЗ рд╕реЗ рдмреБрдХ рдХрд░реЗрдВ\n\n"
    
    itinerary += "ЁЯОп рдЕрдиреБрдорд╛рдирд┐рдд рдмрдЬрдЯ: тВ╣8,000-15,000 рдкреНрд░рддрд┐ рд╡реНрдпрдХреНрддрд┐\n"
    itinerary += "ЁЯУЮ рдмреБрдХрд┐рдВрдЧ рдпрд╛ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП? рдмрд╕ рдкреВрдЫреЗрдВ!"
    
    return itinerary

def generate_bengali_itinerary(days, interests):
    """Generate Bengali itinerary"""
    itinerary = f"ЁЯЧУя╕П {days}-ржжрж┐ржи ржЭрж╛ржбрж╝ржЦржгрзНржб ржнрзНрж░ржоржг ржкрж░рж┐ржХрж▓рзНржкржирж╛:\n\n"
    
    if days >= 1:
        itinerary += "ЁЯУЕ ржжрж┐ржи рзз: рж░рж╛ржБржЪрж┐ ржЕржирзНржмрзЗрж╖ржг\n"
        itinerary += "тАв рж╕ржХрж╛рж▓: рж╣рзБржирзНржжрзНрж░рзБ ржЬрж▓ржкрзНрж░ржкрж╛ржд (рзпрзо ржорж┐ржЯрж╛рж░) ржжрзЗржЦрзБржи\n"
        itinerary += "тАв ржмрж┐ржХрж╛рж▓: рж░ржХ ржЧрж╛рж░рзНржбрзЗржи - ржирзМржХрж╛ ржмрж┐рж╣рж╛рж░ ржУ ржЕрзНржпрж╛ржбржнрзЗржЮрзНржЪрж╛рж░\n"
        itinerary += "тАв рж╕ржирзНржзрзНржпрж╛: ржкрж╛рж╣рж╛ржбрж╝рзА ржоржирзНржжрж┐рж░ ржерзЗржХрзЗ рж╕рзВрж░рзНржпрж╛рж╕рзНржд\n"
        itinerary += "тАв рж░рж╛ржд: рж░рж╛ржБржЪрж┐ рж╢рж╣рж░рзЗ ржерж╛ржХрзБржи\n\n"
    
    if days >= 2:
        itinerary += "ЁЯУЕ ржжрж┐ржи рзи: рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржРрждрж┐рж╣рзНржп ржнрзНрж░ржоржг\n"
        itinerary += "тАв рж╕ржХрж╛рж▓: ржЬржЧржирзНржирж╛рже ржоржирзНржжрж┐рж░ - рж╕рзНржерж╛ржкрждрзНржп ржирж┐ржжрж░рзНрж╢ржи\n"
        itinerary += "тАв ржмрж┐ржХрж╛рж▓: ржЙржкржЬрж╛рждрзАржпрж╝ ржЬрж╛ржжрзБржШрж░ - рж╕ржорзГржжрзНржз рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржРрждрж┐рж╣рзНржп\n"
        itinerary += "тАв рж╕ржирзНржзрзНржпрж╛: рж╕рзНржерж╛ржирзАржпрж╝ ржмрж╛ржЬрж╛рж░рзЗ ржЙржкржЬрж╛рждрзАржпрж╝ рж╣рж╕рзНрждрж╢рж┐рж▓рзНржк ржХрзЗржирж╛ржХрж╛ржЯрж╛\n"
        itinerary += "тАв рж░рж╛ржд: рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ рж▓рзЛржХржирзГрждрзНржп ржкрж░рж┐ржмрзЗрж╢ржирж╛\n\n"
    
    if days >= 3:
        itinerary += "ЁЯУЕ ржжрж┐ржи рзй: ржирзЗрждрж░рж╣рж╛ржЯ ржкрж╛рж╣рж╛ржбрж╝рзА рж╕рзНржЯрзЗрж╢ржи\n"
        itinerary += "тАв ржнрзЛрж░: ржирзЗрждрж░рж╣рж╛ржЯ ржпрж╛рждрзНрж░рж╛ (ржЫрзЛржЯржирж╛ржЧржкрзБрж░рзЗрж░ рж░рж╛ржирзА)\n"
        itinerary += "тАв рж╕ржХрж╛рж▓: рж╕рзВрж░рзНржпрзЛржжржпрж╝ ржмрж┐ржирзНржжрзБрж░ ржЕржнрж┐ржЬрзНржЮрждрж╛\n"
        itinerary += "тАв ржмрж┐ржХрж╛рж▓: ржкрзНрж░ржХрзГрждрж┐ рж╣рж╛ржБржЯрж╛ ржУ рж╕рзНржерж╛ржирзАржпрж╝ ржЙржкржЬрж╛рждрзАржпрж╝ ржЧрзНрж░рж╛ржо ржнрзНрж░ржоржг\n"
        itinerary += "тАв рж╕ржирзНржзрзНржпрж╛: рж╕рзВрж░рзНржпрж╛рж╕рзНржд ржмрж┐ржирзНржжрзБ ржерзЗржХрзЗ ржЙржкрждрзНржпржХрж╛рж░ ржжрзГрж╢рзНржп\n\n"
    
    # Add travel tips in Bengali
    itinerary += "ЁЯТб ржнрзНрж░ржоржг ржкрж░рж╛ржорж░рзНрж╢:\n"
    itinerary += "тАв рж╕ржмржЪрзЗржпрж╝рзЗ ржнрж╛рж▓ рж╕ржоржпрж╝: ржЕржХрзНржЯрзЛржмрж░ ржерзЗржХрзЗ ржорж╛рж░рзНржЪ (ржоржирзЛрж░ржо ржЖржмрж╣рж╛ржУржпрж╝рж╛)\n"
    itinerary += "тАв ржЖрж░рж╛ржоржжрж╛ржпрж╝ржХ ржЯрзНрж░рзЗржХрж┐ржВ ржЬрзБрждрж╛ ржирж┐ржпрж╝рзЗ ржпрж╛ржи\n"
    itinerary += "тАв рж╕рзНржерж╛ржирзАржпрж╝ ржЙржкржЬрж╛рждрзАржпрж╝ ржЦрж╛ржмрж╛рж░рзЗрж░ рж╕рзНржмрж╛ржж ржирж┐ржи\n"
    itinerary += "тАв ржмржи ржмрж┐рж╢рзНрж░рж╛ржорж╛ржЧрж╛рж░ ржЖржЧрзЗ ржерзЗржХрзЗ ржмрзБржХ ржХрж░рзБржи\n\n"
    
    itinerary += "ЁЯОп ржЖржирзБржорж╛ржирж┐ржХ ржмрж╛ржЬрзЗржЯ: тВ╣рзо,рзжрзжрзж-рззрзл,рзжрзжрзж ржкрзНрж░рждрж┐ ржмрзНржпржХрзНрждрж┐\n"
    itinerary += "ЁЯУЮ ржмрзБржХрж┐ржВ ржмрж╛ ржЖрж░ржУ рждржерзНржп ржкрзНрж░ржпрж╝рзЛржЬржи? рж╢рзБржзрзБ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи!"
    
    return itinerary

def extract_days(message):
    """Extract number of days from user message"""
    import re
    # Look for patterns like "3 day", "5 days", "рждрж┐ржи ржжрж┐ржи", "3 рджрд┐рди"
    day_patterns = [
        r'(\d+)\s*(?:day|days)',
        r'(\d+)\s*(?:ржжрж┐ржи|ржжрж┐ржирзЗрж░)',
        r'(\d+)\s*(?:рджрд┐рди|рджрд┐рдиреЛрдВ)',
    ]
    
    for pattern in day_patterns:
        match = re.search(pattern, message.lower())
        if match:
            return int(match.group(1))
    
    # Look for word numbers
    word_to_num = {
        'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,
        'ek': 1, 'do': 2, 'teen': 3, 'char': 4, 'panch': 5,
        'ржПржХ': 1, 'ржжрзБржЗ': 2, 'рждрж┐ржи': 3, 'ржЪрж╛рж░': 4, 'ржкрж╛ржБржЪ': 5
    }
    
    for word, num in word_to_num.items():
        if word in message.lower():
            return num
    
    return None

def extract_interests(message):
    """Extract interests from user message"""
    interests = []
    message_lower = message.lower()
    
    # Nature keywords in multiple languages
    nature_keywords = ['nature', 'eco', 'wildlife', 'falls', 'forest', 'рдкреНрд░рд╛рдХреГрддрд┐рдХ', 'ржкрзНрж░ржХрзГрждрж┐', 'рд╡рди', 'ржмржи']
    # Cultural keywords
    cultural_keywords = ['cultural', 'culture', 'heritage', 'tribal', 'temple', 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ', 'рж╕ржВрж╕рзНржХрзГрждрж┐', 'рдордВрджрд┐рд░', 'ржоржирзНржжрж┐рж░']
    # Adventure keywords
    adventure_keywords = ['adventure', 'trekking', 'sports', 'рд╕рд╛рд╣рд╕рд┐рдХ', 'ржжрзБржГрж╕рж╛рж╣рж╕рж┐ржХ', 'рдЯреНрд░реЗрдХрд┐рдВрдЧ', 'ржЯрзНрж░рзЗржХрж┐ржВ']
    
    if any(keyword in message_lower for keyword in nature_keywords):
        interests.append('nature')
    if any(keyword in message_lower for keyword in cultural_keywords):
        interests.append('cultural')
    if any(keyword in message_lower for keyword in adventure_keywords):
        interests.append('adventure')
    
    return interests if interests else ['nature']  # Default to nature

# Dialogflow webhook endpoint (for production use)
@app.route('/dialogflow-webhook', methods=['POST'])
def dialogflow_webhook():
    """Handle Dialogflow fulfillment requests"""
    try:
        req = request.get_json()
        
        intent_name = req.get('queryResult', {}).get('intent', {}).get('displayName', '')
        parameters = req.get('queryResult', {}).get('parameters', {})
        query_text = req.get('queryResult', {}).get('queryText', '')
        language_code = req.get('queryResult', {}).get('languageCode', 'en')
        
        print(f"ЁЯФЧ Webhook called for intent: {intent_name}")
        print(f"ЁЯУЭ Parameters: {parameters}")
        
        # Map language codes
        language = language_code.split('-')[0] if '-' in language_code else language_code
        
        # Handle specific intents
        if intent_name == 'Plan_Itinerary':
            days = parameters.get('days', 3)
            interests = parameters.get('interests', ['nature'])
            
            if isinstance(days, str):
                days = int(days) if days.isdigit() else 3
            
            response_text = plan_itinerary(f"{days} day {' '.join(interests)} trip", language)
            
        elif intent_name == 'Tourist_Places':
            response_text = get_tourist_places_response(language)
            
        elif intent_name == 'Cultural_Info':
            response_text = get_cultural_info(language)
            
        elif intent_name == 'Eco_Tourism':
            response_text = get_eco_tourism_info(language)
            
        elif intent_name == 'Default Welcome Intent':
            response_text = get_greeting_response(language)
            
        else:
            # Fallback processing
            response_text = process_intent_fallback(query_text, language)
        
        return jsonify({
            'fulfillmentText': response_text
        })
        
    except Exception as e:
        print(f"тЭМ Webhook error: {e}")
        return jsonify({
            'fulfillmentText': 'Sorry, I encountered an error. Please try again.'
        })

if __name__ == '__main__':
    print("ЁЯЪА Starting Jharkhand Tourism Chatbot...")
    print(f"ЁЯМР Server will run at: http://localhost:5000")
    print(f"ЁЯФз Debug mode: {os.getenv('FLASK_DEBUG', 'True')}")
    
    app.run(
        debug=os.getenv('FLASK_DEBUG', 'True').lower() == 'true',
        port=int(os.getenv('FLASK_PORT', 5000)),
        host='0.0.0.0'
    )
